<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Project 2</title>
</head>

<body>

<h3 align="center">Project 2: A Messenger Application</h3>
<p align="center">Due: 11/22/2016</p>
<hr>
<h4>Project Objectives</h4>
<ol>
  <li>Experiencing signal handling and thread programming</li>
	<li>Mastering socket based networking application development</li>
  <li>Getting familiar with application-layer network protocol design and
    development</li>
  <li>Understanding how peer-to-peer systems such as Yahoo Messenger work</li>
</ol>
<h4>Project Description</h4>
<blockquote>
  <p>A messenger application has two components: a <font color="#0000FF">messenger
  server</font> and <font color="#0000FF">messenger clients</font>. A messenger server is
  an application program that maintains the user account information and their
  current location, which facilitates the direct communication between peers.
  When a client first starts, a user will send the username and password to the
  messenger server (assuming the user has registered with the server). After signing into the server system, the client will also send the
  current location information (including both IP address and port number) to
  the server to which its friends can connect. The server will forward the location information to the 
	user's friends who are currently online. Relying on this location information, two users can directly talk
  to each other by establishing a direct TCP connection between them.&nbsp;</p>
  <p>In this project, you need to write two programs <font color="#0000FF">messenger_server</font>
  and <font color="#0000FF">messenger_client</font>, which correspond to the
  messenger server and messenger client, respectively. The BSD sockets are used for
  communications between the client and server (and between clients/peers). The functionality of each of
  these programs is described below. </p>
  <p>messenger_server</p>
  <blockquote>
    <p>usage: messenger_server user_info_file configration_file</p>
  </blockquote>
  <p>The messenger server program takes two parameters user_info_file and 
	configuration_file, which are both file names. The file user_info_file contains the user account information. Each user
  account occupies one line. Each line contains three pieces of user
  information: username, password, and contact list. They
  are separated by a vertical bar &quot;|&quot;. Contact list may contain
  multiple friends (i.e., their usernames), which are separated by a semicolon &quot;;&quot;. Passwords are in
  plain text. The following is an example line for user &quot;user1&quot;, which
  has three friends in the contact list.</p>
  <p>user1|password1|user2;user5;user6</p>
  <p>The parameter configuration_file is a configuration file for the server 
	program. Each configuration entry occupies one line with the following 
	format: <strong>keyword: value. </strong>Currently only one keyword <strong>
	port</strong> is defined. The value of port is a nonnegative integer, which 
	specifies the port number on which the server program should run. When the 
	specified port number is 0, the server asks the system to assign any unused 
	port number for the server.&nbsp;&nbsp; </p>
	<p>After the server program starts, it will first read in the user account
  information and the configuration information. Then it will create a socket using the socket() system call. It 
  binds its address to the socket using the bind() system call. The server machine's 
	fully-qualified domain name and the (assigned) port number are displayed on the screen. Then listen()
  call is used to indicate that the server is now ready to receive connect
  requests from clients.</p>
  <p>The server's job is to wait for either connection or disconnection requests from clients. If it receives a connect request, it accepts the
  connection.&nbsp; After the connection has been established, the client will
  either register with the server, or log into the server by sending the user account information and location information to the server (see
  below for details) if the user has registered before. When a user tries to 
	register with the server system, the user will send a selected username and 
	password to the server. The server will check if the username is available. 
	If it is available, the user has successfully registered with the server 
	system. Otherwise, the server will inform the user that the selected 
	username has been occupied. </p>
	<p>When a registered user tries to log into the server system, the server will first check if the username and password
  supplied by the client match the ones maintained by the server. If they match,
  the user has successfully logged into the server, and the server will display 
	a message showing the total number of users online. If the username and 
	password do not match, the server will
  inform the user that the username and password do not match and ask the user
  to send the username and password again. After a user (say, user1)
  successfully logs into the server, user1 will also send the location
  information to the server. The server will record the location information.
  Then the server will send the location information of user1's friends to
  user1. In addition, the server will also send the location information of
  user1 to user1's friends who have logged in (i.e., who are online).&nbsp;</p>
  <p>If the server receives a disconnect request from user1, it
  closes the connection, deletes the location information, and informs the
  friends of user1 that user1 is offline.&nbsp;In addition, the total number of 
	users online should also be updated.</p>
  <p>messenger_client</p>
  <blockquote>
    <p>usage: messenger_client configuration_file</p>
  </blockquote>
  <p>The configuration_file has the same format as the configuration file of the 
	server program. The client configuration file defines two keywords: <strong>
	servhost</strong> and <strong>servport, </strong>they specify the messenger 
	server's hostname (or dotted-decimal IP address) and port number, 
	respectively. The client first creates a socket using the socket() system 
	call. It then connects to the server using the connect() system call. The 
	whereabouts of the server are specified in the configuration file as 
	discussed above.</p>
  <p>Once the connection is established, the user can perform three operations: 
	1) 
	register with the server using command &quot;r&quot;, 2) log into the server using 
	command &quot;l&quot;, or 3) exit the client program using command &quot;exit&quot;. When the 
	user type either command r or l, the client program will ask the user to 
	enter the username and password. The username and password will be sent to the server
  via the connection. The server will return status code &quot;200&quot; if the
  username is available (for registration) or the username and password match 
	(for login). Otherwise, the server will return status code
  &quot;500&quot; and the client will inform the user the error&nbsp; and ask the user to enter the username and 
	password again. This process repeats until it succeeds. After logging to the 
	server successfully,&nbsp; the client will then create another socket using 
	the socket() system. It will then bind the socket to local port number 
	&quot;5100&quot; and call listen() to indicate that it is now ready to receive connect 
	requests from other clients for chat. The client's job is to wait for user 
	input from the keyboard, chat request from other clients, messages from 
	other clients on established connection, or location information of friends 
	from the server. </p>
  <p>After a user successfully log into the server system, the user can issue a 
	few commands to perform the desired operations. </p>
	<ol>
		<li>chat: a user uses the command &quot;m&quot; to send a message to another friend 
		with the following format: m friend_username whatever_message. If a connection has not
  been established between the user and friend_username, the client program should
  first establish a TCP connection to the client program of friend_username
  (based on the location information sent from the server).</li>
		<li>invitation: a user can invite a friend by issuing the command &quot;i&quot; 
		with the following format: i potential_friend_username [whatever_message]. The invitation 
		message is sent to the server, which then forward the invitation to the 
		invited user. </li>
		<li>accept invitation: after seeing an invitation message, the user can 
		use the command &quot;ia&quot; to accept the invitation: ia inviter_username [whatever_message]. The invitation acceptance message is sent to the 
		server, which in turn forwards the message to the initial inviter. The server will 
		also update the friend list of both users.</li>
		<li>log out: a user can log out from the server by issuing the following 
		command: &quot;logout&quot;. After the user logs out from the server, the user 
		will have the same interface as when the client program first starts. 
		That is, the user can issue three commands &quot;r&quot; to register, &quot;l&quot; to login 
		again, or &quot;exit&quot; to quit the client program.&nbsp; </li>
	</ol>
  <p>When user1 receives chat request from a friend, it will accept the
  connection request. When user1 receives a message from friend on an
  established connection, it will display the message in the following
  format:&nbsp; friend_username &gt;&gt; whatever_message</p>
  <p>When user1 receives location information from the messenger server, it will
  record this information locally and display all the online friends (including
  the new one) on the terminal.</p>
  <p><b>Application layer protocol</b></p>
  <p>In this project, you have the freedom to design your own application layer
  protocol, in particular, the message format exchanged between client and
  server, and among clients (peers). However, you should follow the above
  mentioned requirements and the well-established principles as illustrated in
  the design of HTTP and SMTP.</p>
	<p><strong>Mandatory implementation requirements</strong></p>
	<ul>
		<li>I/O multiplexing on the server and client programs must be 
		implemented using either POSIC threads or select(), and they must be 
		implemented using different approaches. For 
		example, if the I/O multiplexing in the client program is implemented using 
		POSIX threads, the I/O multiplexing in the server program must be 
		implemented using select() system call. You need to document in the 
		README file which technique is used in which program.</li>
		<li>signal process. Your programs must handle the signal SIGINT, 
		generated when a user types Ctrl-C. In particular, your programs must 
		close the opened socket connections before they exit. In addition, the 
		server should save the user accounts into the user_info_file (if it has 
		not done so).</li>
		<li>properly closing opened socket connections: when a user issues the 
		command &quot;logout&quot;, all the opened socket connections should be properly 
		closed before logging the user out from the server, including the chat 
		connections with other friends.</li>
	</ul>
	<p><strong>Optional implementation recommendations</strong></p>
	<ul>
		<li>After a user registers with the server, you have the flexibility to 
		automatically log the user into the server, or the user has to issue the 
		command &quot;l&quot; to log in the server himself after a successful 
		registration.</li>
		<li>You can keep an encrypted password for a user in the user_info_file 
		instead of plaintext. </li>
		<li>You are encouraged to use C++ STL (or TR1) containers and algorithms. 
		You should consider to use C++ STL containers like list, vector, map, or unordered_map (in TR1) 
		to maintain user information, for example, online friends list at the 
		client side and the online users at the server side. TR1 library is installed on linprog
machines. You are discouraged from developing home-made containers to manage 
		user information. In particular, you should not statically allocate an 
		array with a certain size to hold the user information.</li>
	</ul>
</blockquote>
<p align="left"><b>Grading Policy</b></p>
<p align="left">A program with compiling errors will get 0 point (we must be 
able to compile and run your program on linprog). A program that 
does not implement any above requirements will get 0 point. A program that does 
not implement I/O multiplexing according to the requirements will get 0 point.</p>
<ol>
	<li>proper README file and makefile(5)</li>
	<li>server initialization with configuration file(5)</li>
	<li>user registration &quot;r&quot; (5) </li>
	<li>login &quot;l&quot; (15)</li>
	<li>quit the program &quot;exit&quot; (5) </li>
	<li>logout from the server &quot;logout&quot; (15)</li>
	<li>client chat command &quot;m&quot; (15) </li>
	<li>client invitation command &quot;i&quot; (15)</li>
	<li>client invitation acceptance command &quot;ia&quot; (15)</li>
	<li>handling SIGINT signal (15)</li>
</ol>
<h4 style="line-height: 100%; margin-top: 0; margin-bottom: 0">Extra Points</h4>
<blockquote>
<p style="line-height: 100%; margin-top: 0; margin-bottom: 0">There will be 20 extra
points if you implement a GUI on linprog. If you implement a GUI for this 
project, you do not need to follow the commands we specified above, but you must 
have the same functionalities (you can certainly add more functionalities). The 
popular choices of GUI packages on Linux include Qt, wxWidgets, and GTKmm. </p>
</blockquote>
  
<h4>Deliverables Requirement</h4>
<blockquote>
  <p>Tar all the source code files including the header files and the makefile in a single tar file and
  submit via the the submission page on blackboard. Here is a simple example on
  how to use the Unix command tar (assuming all your files related to this
  projects are under one directory, say project2). To tar all the files:</p>
  <p>tar -cvf proj2.tar *</p>
  <p>To check the contents in the tar file:</p>
  <p>tar -tvf proj2.tar</p>
  <p>To untar a tar to get all files in the tar file:</p>
  <p>tar -xvf proj2.tar</p>
</blockquote>
  
</body>

</html>
